
````markdown
# ✅ Phase 1 – Planning

## 🔹 1. Spider the Application (Log All GET/POST Requests)

**Objective:**  
Enumerate all accessible endpoints, parameters, and input vectors of the application, both authenticated and unauthenticated.

### 🧰 Tools Required:
- [Burp Suite Community/Pro](https://portswigger.net/burp)
- [OWASP ZAP](https://www.zaproxy.org/)
- Browser (Firefox/Chrome)
- Optional: `LinkFinder`, `katana`, `hakrawler`

### 🪜 Steps:

1. **Configure Your Browser to Use Burp/ZAP Proxy**
   - Open browser (e.g., Firefox) → Settings → Network → Manual Proxy:
     - HTTP Proxy: `127.0.0.1`, Port: `8080` (default for Burp)
   - Enable HTTPS interception:
     - Visit `http://burpsuite` and install the Burp CA certificate.
     - In Firefox, go to `Settings → Certificates → View Certificates → Authorities → Import` the Burp certificate.

2. **Intercept and Browse the App**
   - Start with unauthenticated browsing.
   - For gray-box tests:
     - Log in using valid credentials.
     - Ensure session cookies are captured in Burp Proxy → HTTP History.
   - Visit all application pages, trigger forms, filters, dropdowns, and dynamic content.

3. **Use Burp’s Crawler/Spider**
   - Go to `Dashboard → New Scan → Crawl and Audit`.
   - Set the scope to `https://target.com`.
   - Ensure cookies/sessions are maintained:
     - Capture a login request → Right-click → `Engagement Tools → Use as logged-in session`.

4. **Export All Endpoints**
   - Open `Target → Site Map → Right-click target → Save items` to store all discovered endpoints.

5. **Use Additional JS Crawlers**
   ```bash
   # Install and run LinkFinder (for JS endpoint discovery)
   git clone https://github.com/GerbenJavado/LinkFinder.git
   python3 linkfinder.py -i https://target.com/app.js -o cli
````

6. **Record API Traffic**

   * Use mobile emulator traffic routing via Burp/ZAP for mobile applications.
   * Capture WebSocket and GraphQL endpoints manually from browser Dev Tools.

### ✅ Pass Criteria:

* All reachable pages, parameters, and entry points are listed including:

  * Authenticated/unauthenticated areas
  * Web APIs (REST, GraphQL)
  * Mobile endpoints (if applicable)

### ❌ Fail Criteria:

* Missed endpoints due to incomplete crawl
* Pages inaccessible due to session expiry or improper cookie handling

### 📸 Screenshots:

* Proxy settings in browser
* Burp’s HTTP History with captured endpoints
* Crawling session summary

````

---

```markdown
## 🔹 2. Fingerprint the Application and Server Stack

**Objective:**  
Identify all back-end and front-end technologies, libraries, platforms, frameworks, and versions to map known CVEs and attack surfaces.

### 🧰 Tools Required:
- [Wappalyzer](https://www.wappalyzer.com/)
- [BuiltWith](https://builtwith.com/)
- [WhatWeb](https://github.com/urbanadventurer/WhatWeb)
- [Nmap](https://nmap.org/)
- [Retire.js](https://retirejs.github.io/retire.js/)
- [Burp Suite]

### 🪜 Steps:

1. **Use Wappalyzer or BuiltWith**
   - Browser Extension: Install Wappalyzer → Visit the target site → Observe tech stack.
   - Or:
     ```bash
     whatweb https://target.com
     ```

2. **Analyze HTTP Headers in Burp**
   - Look for:
     - `Server`, `X-Powered-By`, `X-AspNet-Version`, `X-Drupal-Cache`, etc.
     - Framework-specific cookies (e.g., `PHPSESSID`, `JSESSIONID`, `ASP.NET_SessionId`)

3. **Scan with Nmap for Open Ports and Versions**
   ```bash
   nmap -sV -p- -Pn target.com
````

4. **Run Retire.js for JS Library Vulnerabilities**

   ```bash
   retire --path ./js-files/  # Crawl and download .js assets first
   ```

5. **Detect CMS and Plugins**

   * For WordPress:

     ```bash
     wpscan --url https://target.com --enumerate p
     ```
   * For general CMS:

     * Use [CMSeek](https://github.com/Tuhinshubhra/CMSeeK)

6. **Inspect Favicon Hash (Shodan Lookup)**

   ```bash
   curl https://target.com/favicon.ico | sha1sum
   ```

### ✅ Pass Criteria:

* Clear listing of:

  * Server stack (Apache, NGINX, IIS)
  * Language (PHP, Java, .NET, Node.js)
  * CMS and plugins
  * JS libraries and versions

### ❌ Fail Criteria:

* Obfuscated or unknown stack
* Unverified component versions

### 📸 Screenshots:

* Output from WhatWeb/Nmap
* Headers from Burp HTTP history
* Wappalyzer screenshot

````

---

```markdown
## 🔹 3. Research Custom Test Cases Based on Identified Stack

**Objective:**  
Map all known vulnerabilities, CVEs, and exploit paths against the detected technologies, adding custom tests to your checklist.

### 🪜 Steps:

1. **Lookup CVEs for Each Component**
   - Use:
     - [CVE.Mitre.org](https://cve.mitre.org/)
     - [Exploit-DB](https://www.exploit-db.com/)
     - [Vulners](https://vulners.com/)

2. **Search GitHub for Reported Security Issues**
   ```bash
   https://github.com/<tech-library>/issues?q=is:issue+security
````

3. **Look Up OWASP Guidance for Each Stack**

   * Example:

     * Laravel: `.env` exposure
     * WordPress: `wp-config.php`, `debug.log`
     * React/Angular: DOM-based XSS risks

4. **Add Specific Test Cases**

   * E.g.:

     * Node.js Express: test for prototype pollution
     * Apache Struts: RCE via crafted Content-Type headers

5. **Bookmark Offensive Tools/PoCs**

   * Tools for each stack:

     * CMS: `wpscan`, `droopescan`
     * Laravel: `.env` grabber
     * Java: `ysoserial`, Log4Shell tests

### ✅ Pass Criteria:

* Custom test cases are added based on stack-specific misconfigs and CVEs.

### ❌ Fail Criteria:

* Generic testing approach without targeted stack-specific tests

### 📸 Screenshots:

* CVE PoC pages
* GitHub issues showing relevant bugs
* Local test case file additions

````

---

```markdown
## 🔹 4. Map Business-Critical Functionalities

**Objective:**  
Identify features that are integral to the business (e.g. payments, user data changes, role switching) and are high-value targets for logic flaws.

### 🪜 Steps:

1. **Create a List of Core Use Cases:**
   - Login, registration, account management
   - Checkout, payment gateway, invoices
   - Rewards, coupons, subscriptions
   - Admin/user roles, permissions

2. **Test Each Role:**
   - Enumerate actions for:
     - Normal user
     - Admin
     - Guest (unauthenticated)

3. **Analyze All Parameters Used in Critical Flows:**
   - Examples:
     - `amount=`, `price=`, `coupon=`, `user_id=`, `email=`

4. **Create User Journey Maps (Optional Visuals):**
   - Tools: `draw.io`, `Whimsical`, or GitHub mermaid syntax

5. **Mark Each Function for Further Testing (Logic Flaws, IDOR, etc.)**

### ✅ Pass Criteria:
- List of all critical flows and components with parameters for each
- Role-based mapping completed

### ❌ Fail Criteria:
- Missed business features or functionality tied to money/privileges

### 📸 Screenshots:
- Screens showing flow (add to cart → checkout → confirm)
- Notes or diagrams of business logic
````

---

```markdown
## 🔹 5. Eliminate Dangerous Functionalities from Automated Scanning

**Objective:**  
Prevent automated tools (Burp/ZAP/Netsparker) from triggering sensitive functions (e.g. payment, delete, logout).

### 🪜 Steps:

1. **Identify Risky Endpoints:**
   - Look for:
     - `delete`, `payment`, `logout`, `reset`, `submit`, `finalize`
   - Review:
     - Burp’s Site Map → Right-click → Highlight these endpoints.

2. **Exclude from Scanner Scope:**
   - In Burp:
     - `Target → Scope → Exclude from scope`
   - Or:
     - Use custom passive scan profile → deselect Active Scanning for sensitive URLs

3. **Mark Dangerous Parameters:**
   - Add regex filters or tag parameters like `?delete=true` for manual review only.

4. **ZAP:**
   - Use `Context → Exclude from context` or `Scan Policy → Remove risky categories`.

5. **Use Staging/Mock Data Where Possible**

### ✅ Pass Criteria:
- All sensitive operations excluded from active automated scans

### ❌ Fail Criteria:
- Application logic is altered or destructive actions executed during scan

### 📸 Screenshots:
- Burp/ZAP scope settings
- Highlighted sensitive endpoints
```

---

Would you like me to format **Phase 2 – Automated Testing** next in the same style?
