# Phase 13.5 – OTP Validation Tests

## Objective
Test One-Time Password (OTP) implementations for weaknesses such as brute force susceptibility, replay attacks, bypasses, predictable patterns, and secure handling to ensure the robustness of multi-factor authentication and verification flows.

---

## Steps

### 1. Test OTP Brute Force Protection

- **Goal:** Verify if OTP input is protected against brute force attempts with proper rate limiting and lockout.

- **How to test:**
  1. Identify the OTP submission endpoint (e.g., `/verify-otp`, `/validate-code`).
  2. Using Burp Suite Intruder or a custom script, automate submitting a large set of OTP guesses for a valid user/session.
     - Use common OTP formats (e.g., 6-digit numeric, alphanumeric).
     - Include boundary cases: `000000`, `999999`, `123456`, `111111`.
  3. Observe server responses:
     - Look for rate limiting responses (HTTP 429 or custom messages).
     - Check if account gets temporarily or permanently locked after multiple failed attempts.
     - Check response time delays after failed attempts (e.g., exponential backoff).
  4. Repeat with different user accounts to test global rate limiting or per-user rate limiting.

- **Advanced:**
  - Bypass IP-based rate limits by rotating proxies or Tor exit nodes.
  - Try timing attacks to detect subtle server response delays.

---

### 2. Check OTP Expiry Enforcement

- **Goal:** Verify that OTPs expire correctly after a predefined time window.

- **How to test:**
  1. Trigger an OTP generation (e.g., login, password reset).
  2. Wait beyond the expected expiry time (e.g., 5-10 minutes).
  3. Attempt to use the expired OTP.
  4. Confirm the server rejects expired OTP with proper error message.
  5. Test boundary conditions by submitting OTP just before expiry.

- **Advanced:**
  - Modify system clocks (if testing locally) or intercept OTP generation to test time skew vulnerabilities.
  - Replay captured OTPs multiple times within and after expiry period.

---

### 3. Test OTP Replay and Reuse

- **Goal:** Ensure OTPs are one-time use and cannot be reused across multiple requests or sessions.

- **How to test:**
  1. Submit a valid OTP and complete the verification process successfully.
  2. Attempt to reuse the same OTP again on the same or different session.
  3. Verify the server rejects reused OTPs.
  4. Test if OTPs can be used in other user sessions (session fixation or user ID tampering).

- **Advanced:**
  - Intercept and replay OTP submission requests with Burp Repeater.
  - Modify session tokens or cookies to check if OTP reuse can bypass session checks.

---

### 4. Verify OTP Binding to User and Session

- **Goal:** Confirm OTP is bound to a specific user/session and cannot be used for unauthorized accounts.

- **How to test:**
  1. Generate OTP for user A.
  2. Attempt to submit OTP for user B.
  3. Confirm server rejects OTP not issued to the user/session.
  4. Check if OTP validation endpoint requires session tokens or user identifiers matching OTP request.

- **Advanced:**
  - Tamper with request parameters such as user ID, session ID, or token to test for weak binding.
  - Attempt OTP reuse across multiple devices or browsers.

---

### 5. Test OTP Transmission Security

- **Goal:** Verify OTPs are never transmitted insecurely (e.g., in URLs or logs).

- **How to test:**
  1. Intercept network traffic during OTP generation and submission.
  2. Confirm OTP is not present in URL query parameters or referrer headers.
  3. Check for OTP leakage in HTTP headers, cookies, or error messages.
  4. Check if OTPs are sent over HTTPS only.
  5. Review application logs or error pages (if accessible) for OTP exposure.

- **Advanced:**
  - Test if OTP is cached in browser storage (local/session storage).
  - Search public paste sites or GitHub repos for accidental OTP leaks (OSINT).

---

### 6. Test for OTP Bypass via Logical Flaws or Parameter Tampering

- **Goal:** Discover if OTP verification can be bypassed by manipulating parameters or application logic.

- **How to test:**
  1. Intercept OTP verification request.
  2. Modify parameters such as:
     - OTP code (e.g., blank, `000000`).
     - Flags or boolean parameters indicating OTP success.
     - User/session identifiers.
  3. Attempt to submit verification without OTP or with altered parameters.
  4. Observe if application bypasses OTP verification or returns success incorrectly.
  5. Test common default or fallback codes (e.g., `123456`, `999999`).

- **Advanced:**
  - Analyze client-side JavaScript for hardcoded OTPs or bypass code.
  - Attempt to replay older OTP verification requests with modified parameters.

---

### 7. Test OTP Predictability

- **Goal:** Verify if OTP generation is truly random and unpredictable.

- **How to test:**
  1. Generate multiple OTPs in rapid succession.
  2. Analyze the OTP pattern for predictability or repetition.
  3. Attempt to guess next OTP based on previous ones.
  4. Try to reverse engineer OTP algorithm if possible (especially for time-based OTPs).

- **Advanced:**
  - If TOTP/HOTP is used, check for weak shared secrets.
  - Use tools like `oathtool` to generate OTP codes from intercepted secrets.
  - Monitor for leakage of seed or secret keys.

---

### 8. Test OTP Delivery to Unauthorized Recipients

- **Goal:** Ensure OTPs are only sent to the verified user's contact methods.

- **How to test:**
  1. Attempt to change delivery target parameters (phone number/email) in OTP generation request.
  2. Verify OTP is sent only to the legitimate, registered contact.
  3. Attempt to request OTP for random or non-existent users.
  4. Test if OTP can be triggered for arbitrary phone numbers or emails (account takeover risk).

- **Advanced:**
  - Try social engineering or API fuzzing to enumerate valid user contacts.
  - Test SMS gateway or email service for rate limiting and message interception.

---

## Pass Criteria

- OTPs cannot be brute-forced due to rate limiting or lockout.
- OTPs expire as per specification and cannot be reused.
- OTPs are bound strictly to the user/session that requested them.
- OTPs are transmitted securely and not leaked in URLs, headers, or logs.
- No logical or parameter tampering bypass is possible.
- OTP generation is sufficiently random and unpredictable.
- OTPs are sent only to legitimate users, preventing unauthorized delivery.

---

## Fail Criteria

- No or weak rate limiting on OTP submissions.
- OTP reuse or replay allowed.
- OTPs accepted for wrong users or sessions.
- OTPs leaked in URLs, headers, logs, or insecure channels.
- Logical flaws allow bypassing OTP verification.
- Predictable or guessable OTP patterns.
- OTPs deliverable to arbitrary or attacker-controlled contacts.

---

## Screenshots to Collect

- Burp Intruder attack logs showing OTP brute force attempts.
- Expired OTP submission and server rejection response.
- OTP reuse attempts and server responses.
- Modified requests showing tampering attempts and results.
- Network captures showing OTP transmission security.
- Evidence of unauthorized OTP delivery attempts.

---

## Tools Recommended

- Burp Suite (Proxy, Intruder, Repeater)
- OWASP ZAP
- Custom brute force scripts (Python, bash)
- `oathtool` for TOTP analysis
- OSINT tools for contact enumeration

---

## References

- OWASP Testing Guide – [OTP and MFA Testing](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/13-Testing_for_Multi-Factor_Authentication)
- RFC 6238 - TOTP: Time-Based One-Time Password Algorithm
- Burp Suite Documentation and Extensions

